#!/usr/bin/python -u
#
# Project 4 Webcrawler Code
import urllib2 
import json
import socket

from HTMLParser import HTMLParser  

frontier = []
try_again = []
visitted = []
Cookie = ""

def domainCheck(site):
  spoint = site.find("//") + 2
  #print("DOmain CHeck: ", site[spoint:spoint+17])
  return site[spoint:spoint+8] == "fakebook"

def getResponseCode(msg):
    if msg:
        codeLine = msg.splitlines()[0]
        code = codeLine[9:12]
        #print("Response Code: " + codeLine)
        return code
    else:
        return None

def getHTML(msg):
  if msg:
    return msg[msg.find('<html>'):msg.find('</html>') + 7]
  else:
    return ""

def sendGet(uri):
    request = ("GET " + uri + " HTTP/1.1\r\n" +
	   "Host: fring.ccs.neu.edu\r\n" +
	   "Connection: keep-alive\r\n" +
	   "Accept: */*\r\n" +
           "Cookie: " + Cookie + "\r\n" +
	   "Content-Type: application/x-www-form-urlencoded\r\n" +
           "Content-Length: 0\r\n\r\n")
    return request

def getHeaders(message):
  recvLines = message.splitlines()
  headers = {}
  endofheaders = False
  for line in recvLines:
    if line == '' or endofheaders:
      endofheaders = True;
    else:
      sep = line.find(':')
      if sep > 1:
        if line[:sep] in headers.keys():
          headers[line[:sep]] =  headers[line[:sep]][:headers[line[:sep]].find(';')] + ";" + line[sep + 1:line.find(';')]
        else:
          headers[line[:sep]] = line[sep + 2:]
  return headers

class htmlParser(HTMLParser):

  def __init__(self):
    HTMLParser.__init__(self)
    self.recording = 0 
    self.data = []
  def handle_starttag(self, tag, attrs):
    if tag == 'a':
      for name, value in attrs:
        if name == 'href':
          #print(name,'-', value)
	  if domainCheck(value) and value not in visitted and value not in frontier:
	    frontier.append(value)
	    
         # print "Encountered the beginning of a %s tag" % tag 
   #       self.recording = 1 
    if tag == 'h2':
      for name, value in attrs:
        if name == 'class' and value == 'secret_flag':
	  #print "secret flag found:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" 
	  self.recording = 1

  def handle_endtag(self, tag):
    
   if tag == 'h2':
      self.recording = 0 
      #print "Encountered the end of a %s tag" % tag 
    
  def handle_data(self, data):
    if self.recording:
      self.data.append(data)

p = htmlParser()
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)                 
s.connect(("fring.ccs.neu.edu" , 80))
s.sendall("GET /accounts/login/ HTTP/1.1\r\nConnection: keep-alive\r\nHost:fring.ccs.neu.edu\r\n\r\n")
recv = s.recv(4096)
recvLines = recv.splitlines()
#print recv
headers = getHeaders(recv)
html = getHTML(recv)
response = getResponseCode(recv)
#print recv
#print json.dumps(headers, indent=4)
#print "Response: " + response

request = ("POST /accounts/login/ HTTP/1.1\r\n" +
	   "Host: fring.ccs.neu.edu\r\n" +
	   "Connection: keep-alive\r\n" +
	   "Accept: */*\r\n" +
           "Cookie: " + headers['Set-Cookie'] + "\r\n" +
	   "Content-Type: application/x-www-form-urlencoded\r\n" +
           "Content-Length: 105\r\n\r\n" 
	   "username=001299969&password=W7W8ZD8A&next=/fakebook/&csrfmiddlewaretoken=" + headers['Set-Cookie'][10:headers['Set-Cookie'].find(';')] + "\r\n")
#print request
#Maybe loop here until recv?
s.sendall(request)
uri = ""
msg = s.recv(4096)
headers = getHeaders(msg)
responseCode = getResponseCode(msg)
if responseCode == "302":
    uri = headers["Location"][24:]
    #print("URI:" + uri)
else:
    uri = "/fakebook/"
request = ("GET " + uri + " HTTP/1.1\r\n" +
	   "Host: fring.ccs.neu.edu\r\n" +
	   "Connection: keep-alive\r\n" +
	   "Accept: */*\r\n" +
           "Cookie: " + headers['Set-Cookie'] + "\r\n" +
	   "Content-Type: application/x-www-form-urlencoded\r\n" +
           "Content-Length: 52\r\n\r\n" 
	   "csrfmiddlewaretoken=" + headers['Set-Cookie'][10:headers['Set-Cookie'].find(';')] + "\r\n")
Cookie = headers['Set-Cookie'][:43]
s.sendall(request)
msg = s.recv(4096)
html = getHTML(msg)
#print json.dumps(headers, indent=4)
#print("HTML: " + html)
p.feed(html)

while len(frontier) > 0 and len(p.data) < 5:
  nextURI = frontier.pop()
  request = sendGet(nextURI)
  #print ("Request: " + request)
  s.sendall(request)
  msg = s.recv(4096)
  headers = getHeaders(msg)
  html = getHTML(msg)
  #print ("Message: " + msg)
  print(json.dumps(headers, indent=4))
  #print("HTML: " + html)
  responseCode = getResponseCode(msg)
  if responseCode:
    #print("Response Code " + responseCode)
    if responseCode == "500":
      frontier.append(nextURI)
    else:
      visitted.append(nextURI)
    p.feed(html)
    print("Frontier Length: " + str(len(frontier)))
    #print(len(p.data))
    #print("Visitted Length: " + str(len(visitted)))
    if 'Connection' in headers:
      if headers['Connection'] == 'close':
        #Restart the connection
        #print("Restart connection!!!")
        s.close()
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)                 
        s.connect(("fring.ccs.neu.edu" , 80))
  else:
    s.close()
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)                 
    s.connect(("fring.ccs.neu.edu" , 80))
      
for flag in p.data:
  print(flag)
p.close()
s.close()





