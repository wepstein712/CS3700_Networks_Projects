#!/usr/bin/env python

import argparse, socket, time, json, select, struct, math, copy 
from socket import socket, SOCK_SEQPACKET, AF_UNIX

#DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:

    routes = None
    updates = None
    relations = None
    sockets = None

    def __init__(self, networks):
        self.routes = {}
        self.updates = {}
        self.relations = {}
        self.sockets = {}
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG: 
                print "Starting socket for", network, relation
            self.sockets[network] = socket(AF_UNIX, SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def addressInNetwork(self,ipa,neta,maska):
   	"Is an address in a network"	
	count = 0
	ip = ipa.split('.')
	ipaddr = '{0:08b}{1:08b}{2:08b}{3:08b}'.format(int(ip[0]),int(ip[1]),int(ip[2]),int(ip[3]))
	net = neta.split('.')
	netaddr = '{0:08b}{1:08b}{2:08b}{3:08b}'.format(int(net[0]),int(net[1]),int(net[2]),int(net[3]))
	mask = maska.split('.')
	maskSub = '{0:08b}{1:08b}{2:08b}{3:08b}'.format(int(mask[0]),int(mask[1]),int(mask[2]),int(mask[3]))
	for char in maskSub:
	    if char == '1':
		count += 1
	#print "NETADDR:", netaddr
	#print "SUBMASK:", maskSub
	#print "IP ADDR:", ipaddr
  	return netaddr[:count-1] == ipaddr[:count-1] if count > 0 else True

    def prettyprint_ip(self, ip):
	count = 0
	n = 0
	formatted = ""
        for i in ip:
	    if count % 8 == 0 and not count == 0:
	        formatted += "."
	    formatted += ip[count]
	    count += 1
	return formatted

    def mask_adjusted_ip(self, ip, mask):
	count = 0
        ip_quad = ip.split('.')
        ipaddr = '{0:08b}{1:08b}{2:08b}{3:08b}'.format(int(ip_quad[0]),int(ip_quad[1]),int(ip_quad[2]),int(ip_quad[3]))
	#print "IPADDR: ", self.prettyprint_ip(ipaddr)
        mask_quad = mask.split('.')
        maskSub = '{0:08b}{1:08b}{2:08b}{3:08b}'.format(int(mask_quad[0]),int(mask_quad[1]),int(mask_quad[2]),int(mask_quad[3]))
        for char in maskSub:
            if char == '1':
                count += 1
        address = ipaddr[:count]
	while len(address) < 32:
	    #print address
	    address += '0'
	#print "Adjusted Address: ", self.prettyprint_ip(address)
        return address

    def prefix_length(self, netmask):
	"How long is the netmask"
        count = 0
        mask = netmask.split('.')
        binMask = '{0:08b}{1:08b}{2:08b}{3:08b}'.format(int(mask[0]),int(mask[1]),int(mask[2]),int(mask[3]))
        for char in binMask:
            if char == '1':
                count += 1
	return count

    def bit_string_to_quad(self, bit_string):
	#Turns a byte string of 32 length into an xxx.xxx.xxx.xxx IP/MASK (DOTTED QUAD)
	qA = int(bit_string[:8], 2)
	qB = int(bit_string[8:16], 2)
	qC = int(bit_string[16:24], 2)
	qD = int(bit_string[24:], 2)
	quad = '{0}.{1}.{2}.{3}'.format(qA, qB, qC, qD)
	#print 'Converting: {0} -> {1}'.format(bit_string, quad)
	return quad

    def adjacent_route_reduction(self, ip_a, mask_a, ip_b, mask_b):
	#Returns a route if the routes can be reduced, None if a reduced route cant be produced
	if not mask_a == mask_b:
	    return None
	mask = self.prefix_length(mask_a)
	if ip_a == ip_b:
	    return '{0}/{1}'.format(ip_a,mask) 
	adj_ip_a = self.mask_adjusted_ip(ip_a, mask_a)
	adj_ip_b = self.mask_adjusted_ip(ip_b, mask_b)
	for c in adj_ip_a[mask:]:
	    if c == '1':
		return None
	if adj_ip_a[:mask - 1] == adj_ip_b[:mask - 1] and adj_ip_a[mask:] == adj_ip_b[mask:]:
	    if int(adj_ip_a, 2) < int(adj_ip_b, 2):
		ip = adj_ip_a
	    else:
		ip = adj_ip_b
	    #print "IP A:      ", self.prettyprint_ip(adj_ip_a)
	    #print "IP B:      ", self.prettyprint_ip(adj_ip_b)
	    #print "COALESCED :", self.prettyprint_ip(self.bit_string_to_quad(ip)) + '/' + str(mask - 1)
	    return self.bit_string_to_quad(ip) + '/' + str(mask - 1)
	
    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
	outroutes = []
	longest_prefix = 0;
	print "ROUTES:", self.routes
	for net  in self.routes:
	    print "Finding route through (?)", net
	    r = self.routes[net]
	    #print "Route Array: ", r
	    for route in r:
		print "Checking route: ", json.dumps(route, indent=4)
	    	if self.addressInNetwork(daddr, route['network'], route['netmask']):
		    if self.prefix_length(route['netmask']) > longest_prefix:
                    	longest_prefix = self.prefix_length(route['netmask'])
                    	print "New shortest-prefix route: ", route
                    	outroutes = [route]
                    else:
                    	if self.prefix_length(route['netmask']) == longest_prefix:
                            print "Another shortest-route, adding: ", route
                            outroutes.append(route)

        print "OUTROUTES: ",outroutes
	return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
	print "PRE SHORTEST ASPATH ROUTES: ", routes
        min_as = 10000
        for route in routes:
            if len(route['msg']['ASPath']) < min_as:
                min_as = len(route['msg']['ASPath'])
                outroutes = [route]
            else:
		if len(route['msg']['ASPath']) == min_as:
                    outroutes.append(route)
	print "POST SHORTEST ASPATH ROUTES: ", outroutes
        return outroutes
            
    def get_highest_preference(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
	print "PRE HIGH-PREF ROUTES: ", routes
        outroutes = []
        highest_pref = -1
        for route in routes:
            if route[MESG][LPRF] > highest_pref:
                highest_pref = route[MESG][LPRF]
                outroutes = [route]
            else:
		if route[MESG][LPRF] == highest_pref:
                    outroutes.append(route)
	print "POST HIGH-PREF ROUTES: ", outroutes
        return outroutes
         
    def get_self_origin(self, routes):
        """ select self originating routes """
        outroutes = []
	print "PRE SELF-ORIGIN ROUTES: ", routes
        for route in routes:
            if route['msg']['selfOrigin'] == 'True':
                outroutes.append(route)
	print "POST SELF-ORIGIN ROUTES: ", outroutes
	if len(outroutes) < 1:
	    print "NO SELF_ORIGIN, NOT FILTERING"
	    return routes
        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: EGP > IGP > UNK """
        # TODO
        outroutes = []
        for route in routes:
            if route['msg']['origin'] == 'IGP':
                outroutes.append(route)
        if len(outroutes) > 0: 
            return outroutes
        for route in routes:
            if route['msg']['origin'] == 'EGP':
                outroutes.append(route)
        if len(outroutes) > 0: 
            return outroutes
        for route in routes:
            if route['msg']['origin'] == 'UNK':
                outroutes.append(route)

        return outroutes


    def get_lowest_ip_addr(self, routes):
        outroutes = []
        big_routes = []
        ip_list = []
	print "IP TEST ROUTES: ", json.dumps(routes, indent=4)
        for route in routes:
	    ip = route['peer'].split('.')
            print(ip)
	    w = int(ip[0])
            x = int(ip[1])
            y = int(ip[2])
            z = int(ip[3])
            int_ip = [w,x,y,z,route]
            ip_list.append(int_ip) 
        lowest = 100000
        for item in ip_list:
            if item[0] < lowest:
                lowest = item[0]
                big_routes = [item]
            if item[0] == lowest:
                big_routes.append(item)
        lowest = 10000
        ip_list = copy.copy(big_routes)
        big_routes = []
        for item in ip_list:
            if item[1] < lowest:
                lowest = item[1]
                big_routes = [item]
            if item[1] == lowest:
                big_routes.append(item)
        lowest = 10000
        ip_list = copy.copy(big_routes)
        big_routes = []
        for item in ip_list:
            if item[2] < lowest:
                lowest = item[2]
                big_routes = [item]
            if item[2] == lowest:
                big_routes.append(item)
        lowest = 10000
        ip_list = copy.copy(big_routes)
        big_routes = []
        for item in ip_list:
            if item[3] < lowest:
                lowest = item[3]
                big_routes = [item]
            if item[3] == lowest:
                big_routes.append(item)
        
        for item in big_routes:
            outroutes.append(item[4])
        return outroutes



    def filter_relationships(self, srcif, route):
	" For DATA type:"
	" cust->any = OK"
	" any->cust = OK"
	" update or revoke always pass "
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
	"   Update received from a customer: send updates to all other neighbors"
	"   Update received from a peer or a provider: only send updates to your customers"
	if srcif in self.relations:
	    src_relation = self.relations[srcif]
	else:
	    print "No relation stored"
	    return outroutes
	if src_relation == 'cust':
	    print "Relation is CUSTOMER: ", srcif
	    return route
	"dst relation"
	print "Source is CUST"
	peer = route['peer']
	if peer in self.relations:
	    print "DESTINATION RELATION: ", self.relations[peer]
	    if self.relations[peer] == 'cust':
		print "Desination relation is CUSTOMER"
		return route
        return []

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        #TODO
        peer = None
        routes = self.lookup_routes(daddr)
        #Rules go here
        if routes:
	    if len(routes) > 1:
            	# 1. Highest Preference
		#print "TESTING PREF"
            	routes = self.get_highest_preference(routes)
            if len(routes) > 1:
		#print "TESTING SELF ORIGIN"
		# 2. Self Origin
            	routes = self.get_self_origin(routes)
            if len(routes) > 1:
		#print "TESTING SHORTEST ASPATH"
		#3. Shortest ASPath
            	routes = self.get_shortest_as_path(routes)
            if len(routes) > 1:
		#print "TESTING ORIGIN"
		# 4. EGP > IGP > UNK
            	routes = self.get_origin_routes(routes)
            if len(routes) > 1:
		#print "TESTING LOWEST IP"
		# 5. Lowest IP Address
            	routes = self.get_lowest_ip_addr(routes)

            # Final check: enforce peering relationships

	    if routes:
		route = routes[0]
	    else:
		return None

            peer = self.filter_relationships(srcif, route)
	    #print "Found route:", peer
        return self.sockets[peer['peer']] if peer else None	

    def forward(self, srcif, packet):
        """	Forward a data packet	"""
        # TODO
	#print"########################################################################\n"
	daddr = packet['dst']
	route = self.get_route(srcif, daddr)
	if not route:
	    #TODO
	    "Return no_route"
	    "Super high level assumption that router is always x.x.x.1"
	    ip = srcif.split('.')
            ipaddr = ip[0] + '.' + ip[1] + '.' + ip[2] + '.' + '1'
	    msg = {}
	    msg['src'] = ipaddr 
	    msg['dst'] = packet['src']
	    msg['type'] = 'no route'
	    msg['msg'] = {}
	    print "NO ROUTE MSG: ", json.dumps(msg, indent=4)
	    self.send_error(srcif, msg)
	    return False
	print "The route for the data is:", route.getpeername()
	try:
            route.sendall(json.dumps(packet))
        except:
            print "Failed to send to", route
            return False
        return True

    def disaggregate(self):
	#Remove forwarding table
	self.routes = {}
	for key in self.updates.keys():
	    self.routes[key] = []
	    for entry in self.updates[key]:
		self.routes[key].append(copy.copy(entry))

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
	for key in self.routes:
	    new_routes = []
	    blacklist = []
	    sock = self.routes[key]
	    #print "Sock:", sock
	    print "Old Routes", json.dumps(self.routes, indent=4)
	    for x in sock:
		for y in sock:
		    #print "New Route List: ", new_routes
		    if not x == y:	   
			#DO checks for other values (hpref, aspath, etc.)
			#print "X:",x
			#print "Y:",y
			if x['msg']['origin'] == y['msg']['origin'] and x['msg']['localpref'] == y['msg']['localpref'] and x['msg']['selfOrigin'] == y['msg']['selfOrigin'] and x['msg']['ASPath'] == y['msg']['ASPath']:
		    	    #print "Trying to coalesce routes"
			    coal_route = self.adjacent_route_reduction(x['network'], x['netmask'], y['network'], y['netmask'])
		    	    #print "COAL ROUTE: ", coal_route
			    if coal_route:
			    	#Make coal_route a real route
				if x in new_routes:
                                    new_routes.remove(x)
				    #print "REMOVING ROUTE: ", x
                                if y in new_routes:
                                    new_routes.remove(y)
				    #print "REMOVING ROUTE: ", y
			    	r = x
			    	r['network'] = coal_route[:coal_route.find('/')]
			    	#print "NEW COAL ROUTE: ", coal_route[:coal_route.find('/')]
			    	mask_len = int(coal_route[coal_route.find('/') + 1:])
			    	netmask = ""
			    	count = 0
			    	while count < 32:
				    if count < mask_len:
				    	netmask += "1"
				    else:
				    	netmask += "0"
				    count += 1
			    	r['netmask'] = self.bit_string_to_quad(netmask)
			    	if not r in new_routes:
				    blacklist.append(x)
				    blacklist.append(y)
				    if x in new_routes:
                                    	new_routes.remove(x)
                                    	#print "REMOVING ROUTE: ", x
                                    if y in new_routes:
                                    	new_routes.remove(y)
                                    	#print "REMOVING ROUTE: ", y
			    	    new_routes.append(r)
				    #print "ADDING ROUTE: ", r
			    else:
			    	if not y in new_routes and not y in blacklist:
				    new_routes.append(y)
				    #print "ADDING ROUTE: ", y
			else:
			    if not y in new_routes and not y in blacklist:
                            	new_routes.append(y)
				#print "ADDING ROUTE: ", y
	      	    else:
			if len(sock) == 1:
			    if not y in new_routes:
				new_routes.append(y)
				#print "ADDING ROUTE: ", y
				#print "DEFAULT ADD"
	    #print "Key: ",key
	    #print "Old: ",json.dumps(self.routes[key], indent=4)
	    #print "New: ",json.dumps(new_routes, indent=4)
	    self.routes[key] = new_routes
	print "New: ", json.dumps(self.routes, indent=4)
	return False

    def update(self, srcif, packet):
        """	handle update packets	"""
        # TODO
	print"########################################################################\n" 
	print "Routes", json.dumps(self.routes, indent=4)
	print "Updates", json.dumps(self.updates, indent=4)
	#print "Relations", json.dumps(self.relations, indent=4)
	#print "Sockets", self.sockets
	print "UPDATING"
	src = packet['src']
	dst = packet['dst']
	data = {}
	data['network'] = packet['msg']['network']
	data['netmask'] = packet['msg']['netmask']
	data['peer'] = packet['src']
    	data['msg'] = packet['msg']
	update = {}
	update['network'] = packet['msg']['network']
        update['netmask'] = packet['msg']['netmask']
        update['peer'] = packet['src']
        update['msg'] = packet['msg']
	#Add to updates
	if len(self.updates) > 0:
            if src in self.updates.keys():
                #print "ADDING TO UPDATE DICT: ", src
                #print "WITH VALUE OF:   ", update
                self.updates[src].append(update)
            else:
                #print "NEW UPDATE:      ", update
                self.updates[src] = [update]
        else:
            #print "EMPTY UPDATE LIST, FILLING WITH: ", update
            self.updates[src] = [update]
	#Add to routes
	if len(self.routes) > 0:
	    if src in self.routes.keys():
		#print "ADDING TO ROUTE: ", src
		#print "WITH VALUE OF:   ", data
	    	self.routes[src].append(data)
	    else:
		#print "NEW ROUTE:       ", data
	        self.routes[src] = [data]
	else:
	    #print "EMPTY ROUTING TABLE, FILLING WITH: ", data
	    self.routes[src] = [data]
	packet['src'] = dst
	src_relation = ''
	if src in self.relations:
	    src_relation = self.relations[src]
	else:
	    #print "Problem found, update came from someone with no relation to router"
	    return False
	"Update is from customer, send to all"	 
	if src_relation == 'cust':
	    for conn in self.sockets:
	        if conn in self.routes:
            	    #if not self.addressInNetwork(src, conn, self.routes[conn][0]['netmask']):
	       	    if not conn == src:
			packet['dst'] = conn
             	    	#print "PACKET:", packet
		    	#print "TO    :", conn
		    	self.sockets[conn].sendall(json.dumps(packet))
	    	    else:
		    	print "Didn't update source: ", conn
	        else:
		    packet['dst'] = conn
		    #print "PACKET:", packet
		    #print "TO    :", conn
		    self.sockets[conn].sendall(json.dumps(packet))
	else:
	    "Update is not from customer, only send to customers"
	    for conn in self.sockets:
		if self.relations[conn] == 'cust':
                    if conn in self.routes:
                    	if not self.addressInNetwork(src, conn, self.routes[conn][0]['netmask']):
                            packet['dst'] = conn
                            #print "PACKET:", packet
                            #print "TO    :", conn
                            self.sockets[conn].sendall(json.dumps(packet))
                        else:
                            print "Didn't update source: ", conn
                    else:
                    	packet['dst'] = conn
                    	#print "PACKET:", packet
                    	#print "TO    :", conn
                    	self.sockets[conn].sendall(json.dumps(packet)) 
		else:
		    print "Not sending update to -> ", conn
		    #print "Relation is ", self.relations[conn]  
        self.coalesce()
	return True
    
    def revoke(self, packet):
        """	handle revoke packets	"""
	#Disagregate
	self.disaggregate()        
	revoke_routes = packet['msg']
	src = packet['src']
	dst = packet['dst']
	for r in revoke_routes:
	    if src in self.routes.keys():
 	        network = r['network']
	        netmask = r['netmask'] 
		for route in self.routes[src]:
		    if route['network'] == network and route['netmask'] == netmask:
			print "REVOKING ROUTE: ", json.dumps(route, indent=4)
			self.routes[src].remove(route)
			self.updates[src].remove(route)
        #print "Routes", json.dumps(self.routes, indent=4)
        #print "Sockets", self.sockets

	for conn in self.sockets:
            if conn in self.routes:
		if len(self.routes[conn]) > 0:
                    if not self.addressInNetwork(src, conn, self.routes[conn][0]['netmask']):
                    	packet['dst'] = conn
			packet['src'] = dst
                    	#print "PACKET:", packet
                    	#print "TO    :", conn
                    	self.sockets[conn].sendall(json.dumps(packet))
                    else:
                    	print "Didn't update source: ", conn
		else:
		    print "PATH REVOKED LEN 0"
            else:
                packet['dst'] = conn
		packet['src'] = dst
                #print "PACKET:", packet
                #print "TO    :", conn
                self.sockets[conn].sendall(json.dumps(packet))
	self.coalesce()
	return True

    def dump(self, packet):
        """	handles dump table requests	"""
        # TODO
	print"########################################################################\n"
	print "DUMPING"
	src = packet["src"]
	dst = packet["dst"]
	print "Source", src
	print "destination", dst
	data = {}
	data['src'] = dst
	data['dst'] = src
	data['type'] = 'table'
	message = []
	for array in self.routes.values():
	    for entry in array:
		message.append(entry)
	data['msg'] = message
	print json.dumps(data, indent=4)
	#Get route for src (The new destination)
	try:
	    self.sockets[src].sendall(json.dumps(data))
	except:
	    print "Failed to send to", self.sockets[src]
	    return False
        return True

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        # TODO
	print"########################################################################\n" 
	print "\n\nMessage\n",json.dumps(packet, indent=4)
	print "\n\n\n"
	type = packet["type"]
	if type == "update":
	    self.update(srcif, packet)
	if type == "wait":
	    print "WAITING"
	if type == "dump":
	    self.dump(packet)
	if type == "data":
	    self.forward(srcif, packet)
	if type == "revoke":
	    self.revoke(packet)
        return True

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        self.sockets[conn].sendall(json.dumps(msg))
        return

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        return

if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
