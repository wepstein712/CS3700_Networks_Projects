#!/usr/bin/python -u
#
# Project 3 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000

# SET THIS BACK TO 30 BEFORE HANDING IN!!!
TIMEOUT = 3
SEQUENCE = 0
WINDOW = 1
UNACKED = []
#DATA = []
INPUT = []
PACKET_NUM =  0

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)
CUR_TIME = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet():
  global SEQUENCE
  global UNACKED
  log("SHOULD NEVER BE CALLED RIGHT NOW")
  log("WINDOW SIZE: " + str(WINDOW))
  data = sys.stdin.read(DATA_SIZE)
  if (len(data) > 0):
    msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False})
    assert (len(msg) <= 1472), "ERROR: Datagram is longer than 1472 bytes!!!"
    SEQUENCE += len(data)
    #DATA.append(json.loads(msg)) #      {"sequence": SEQUENCE, "data": data, "ack": False, "eof": False})
    UNACKED.append(int(SEQUENCE))
    if sock.sendto(msg, dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
    return True
  else:
    return False

def resend_packet(info):
  log("SHOULD PROBS NOT BE CALLED AT THIS POINT")
  msg = json.dumps(info)
  UNACKED.append(int(info['sequence']))
  if sock.sendto(msg, dest) < len(msg):
    log("[error] unable to fully send packet")
  else:
    log("[send data] " + str(info['sequence'] + " (" + str(len(info['data']))) + ")")
  return True
  
def send_packet(index):
  global PACKET_NUM

  if index >= len(INPUT):
    return False
  
  log("Sending index #" + str(index))
  msg = INPUT[index]
  json_object = json.loads(msg)
  #log("THIS IS A TEST: " + str(len(json_object.keys())))
  UNACKED.append([json_object, int(time.time() + TIMEOUT)])
  if sock.sendto(msg, dest) < len(msg):
    log("[error] unable to fully send packet")
  else:
    log("[send data] " + str(json_object['sequence']) + " (" + str(len(json_object['data'])) + ")")
   # log("************************************")
   # log(msg)
   # log("************************************")
    PACKET_NUM += 1
    

def readData():
  global  INPUT
  global  SEQUENCE
  section = sys.stdin.read(DATA_SIZE)
  while (len(section) > 0):
    #SEQUENCE += len(section)
    
    msg = json.dumps({"sequence": SEQUENCE, "data": section, "ack": False, "eof": False})
    assert (len(msg) <= 1472), "ERROR: Datagram is longer than 1472 bytes!!!"
    SEQUENCE += len(section)
    INPUT.append(msg)
    section = sys.stdin.read(DATA_SIZE)
    
  #log("Chunks read: " + str(len(INPUT)))
  #for i in INPUT:
   # log("First chunk starts with " + i[:100])
    #log("HOpefully this shows the data: " + str(json.loads(i)['data']))
#first packet
#send_next_packet()


def calc_packet(offset):
  global UNACKED
  index = int(offset / DATA_SIZE)
  log("CALC_PACKET: " + str(index))
  seq_num = INPUT[index]['sequence']
  new_list = []
  log("MADE IT HERE TOO")
  for u in UNACKED:
    if (u['sequence'] <= seq_num):
      new_list.append(u)
      log("added a thing to the new unached")
  log("itll make it here")
  UNACKED = new_list
  return index
    

def msg_timeout(msg):
  if json.dumps(msg[0]) in INPUT:
    log("FOUND IN INPUT: " + str(msg[0]['sequence']))
    ind =  0
    for i in INPUT:
      if (msg[0]['sequence'] == json.loads(i)['sequence']):
        PACKET_NUM = ind    
        UNACKED.remove(msg)
        break
      ind += 1

readData()

CUR_TIME = int(time.time())

timer_calls = 0

#now send packets
while True:
  log("ABOUT TO SLEEP")
  log("U: " + str(len(UNACKED)) + ", W: " + str(WINDOW))
  #iresult = sock.recvfrom(MSG_SIZE)
  #log("UNACKED: " + str(len(UNACKED)) + ", Window: " + str(WINDOW) + ", Packet Index: " + str(PACKET_NUM))  
 # for u in UNACKED:
   # log("Unacked: " + str(u['sequence']))  
  while len(UNACKED) < WINDOW:
    send_packet(PACKET_NUM)
  if CUR_TIME != int(time.time()):
    CUR_TIME = int(time.time()) 
    timer_calls += 1
    log("TIMER Calls: " + str(timer_calls)) 
    for u in UNACKED:
      if u[1] >= CUR_TIME:
        log("Timeout?: " + str(int(u[1]) % 100)  + " / " + str(int(CUR_TIME) % 100)) 
        msg_timeout(u)
        send_packet(PACKET_NUM)
    
   
  
  result = sock.recvfrom(MSG_SIZE)   
  if result:
    (data, addr) = result
    try:
      decoded = json.loads(data)

      #log(str(decoded['ack']) + " -- " + str(UNACKED))     
      # If there is an ack, send next packet
      for u in UNACKED: 
        #log("got here 1")
        log("decoded: " + str(decoded['ack']))
        #log("      u: " + str(u))
	if decoded['ack'] ==  u['sequence'] + DATA_SIZE :
          log("[recv ack] " + str(decoded['ack']))
          WINDOW += 5 
          #for d in DATA:
          #  log("got here 2")
          #  if d['sequence'] == decoded['ack']:
          #    log("got here 3")
          #    d['ack'] = True
          #    break
    #      log("got here 4")
          UNACKED.remove(u)    
     #     log("got here 5")
          # Try to send next packet; break if no more data
          if (not send_packet(PACKET_NUM)):
            break
          break;
        else:
          log("ACKED IMPOSSIBLE THING")
          #log("NUM: " + decoded['ack'])
          PACKET_NUM = calc_packet(decoded['ack'])
          WINDOW = WINDOW / 2
          send_packet(PACKET_NUM)
         #for m in UNACKED:
          #  log("UNACKED: " + len(m.keys())) # + m['sequence'])
          #ifor d in DATA:
          #  if not d['ack']:
          #    resend_packet(d) 
    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
      log(data)
  else:
    log("[error] timeout")
    sys.exit(-1)
  
sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
sys.exit(0)
