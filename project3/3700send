#!/usr/bin/python -u

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1400
TIMEOUT = .5
SEQUENCE = 0
#Array of sequence #'s yet to be ACK'ed
UNACKED = []
UNACKED_LENGTH = 0
#Mapping of <sequence #, message> for UNACKED messages (Dumped json as message)
UNACKED_MESSAGES = {}
UNACKED_MESSAGES_LENGTH = 0
WINDOW = 1
THRESH = 100
MAX = 200
#Boolean to quit loop (Because you can't double break)
DONE = False
#Value for the Retransmission Time-Out
RTO = .1
TIMEOUT_COUNT = 0
SKIP_ACK = False
LAST_SEND = time.time()
LAST_RECV = 0
TIME_ADJUST = 1
#Boolean for if there needs to be a resend or not
RESEND = False

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet():
  global SEQUENCE
  global UNACKED
  global UNACKED_MESSAGES
  global UNACKED_LENGTH
  global UNACKED_MESSAGES_LENGTH

  data = sys.stdin.read(DATA_SIZE)
  if (len(data) > 0):
    msg = json.dumps({"sequence": SEQUENCE, "data": data, "eof": False})
    assert (len(msg) <= 1472), "ERROR: Datagram is longer than 1472 bytes!!!"
    SEQUENCE += len(data)
    log("About to add msg/SEQUENCE to storage")
    #Add message data to the UNACKED items 
    UNACKED.append(int(SEQUENCE))
    UNACKED_MESSAGES[int(SEQUENCE)] = msg
    UNACKED_LENGTH += 1
    UNACKED_MESSAGES_LENGTH += 1
  
    if sock.sendto(msg, dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
      LAST_SEND = time.time()
    return True
  else:
    return False

def send_packet(msg):
  global SEQUENCE
  global UNACKED
  global UNACKED_MESSAGES
  global UNACKED_LENGTH
  global UNACKED_MESSAGES_LENGTH

  if sock.sendto(msg, dest) < len(msg):
    log("[error] unable to fully send packet")
    return False
  else:
    log("[Re-send data] " + str(SEQUENCE))

  return True
  

# Send first packet
send_next_packet()

# Now read in data, send packets
while UNACKED_LENGTH > 0:
  log("Starting Loop: UNACKED" + str(UNACKED))
  #This try/catch is for starting/stopping a new window
  try:
    result = sock.recvfrom(MSG_SIZE)
    SKIP_ACK = False
  except:
    result = None
    log("[error] timeout in sending 1st packet of window")
    RTO = RTO * 1.5
    sock.settimeout(RTO)
    if TIMEOUT_COUNT == 100:
      log("fatal timeout: closing")
      sys.exit(-1)
    TIMEOUT_COUNT += 1
    SKIP_ACK = True
    RESEND = True

 
  if result and not SKIP_ACK:
    #It is still necessary to calculate the RTO since this data is the time from send/response and not response/next response (Which is the below portion)
    if LAST_RECV == 0:
      RTO = (time.time() - LAST_SEND) * 1.2
      if RTO > 1:
	RTO = 1.6
    else:
      RTO += ((RTO - (time.time() - LAST_RECV)) * .1) * (1 + (WINDOW / 100))
      RTO = max(RTO, .01)
      if RTO > 1 and WINDOW > 8:
	RTO = RTO * (1 + WINDOW / 100)
      log("Current RTO: " + str(RTO))
    LAST_RECV = time.time()
    #No need to test for the RTO timeout since the RECV should send all ACK's back or it is an actual timeout
    sock.settimeout(RTO)
    RESEND = False    

    while UNACKED_LENGTH > 0:
      (data, addr) = result
      try:
        decoded = json.loads(data)
        ack_seq = decoded['ack']

        # If there is an ack, send next packet
        if ack_seq in UNACKED and not RESEND:
	  if UNACKED[0] < ack_seq:
	    #Out of order
	    RESEND = True
	  else:
            log("[recv ack] " + str(ack_seq))
	    UNACKED.remove(ack_seq)
	    del UNACKED_MESSAGES[ack_seq]
	    UNACKED_LENGTH -= 1
            UNACKED_MESSAGES_LENGTH -= 1
	    log("UNACKED is now " + str(UNACKED) + " with a length of " + str(UNACKED_LENGTH))
        
        #Here there is a duplicate ACK, since there is no way to get an ACK not in UNACKED other than because of this
        else:
          log("Duped ACK: " + str(ack_seq))
	  RESEND = True
      except (ValueError, KeyError, TypeError):
        log("[recv corrupt packet]")
      if UNACKED_LENGTH > 0:
	#May need to do a timeout/retry thing here for dropped ACK's (Or handle that responsibility on the recv/in the packet)
	try:
	  result = sock.recvfrom(MSG_SIZE)
	except:
	  log("[error] timeout while waiting for ACK")
	  TIMEOUT_COUNT += 1
          WINDOW = 1
	  RTO = RTO * 1.2
    	  for seq in UNACKED:
      	    log("RESENDING: " + str(seq))
            send_packet(UNACKED_MESSAGES[seq])
	  RESEND = False
	  break

    if UNACKED_LENGTH <= 0 and not RESEND:
      if WINDOW < THRESH:
        WINDOW = min(WINDOW * 2, THRESH)
      else:
        if WINDOW < MAX:
          WINDOW += 1
      # Try to send next packet; break if no more data
      while UNACKED_LENGTH < WINDOW and not DONE:
        if (not send_next_packet()):
          DONE = True
          break
        log("UNACKED is now " + str(UNACKED))
	#Up TIME_ADJUST since the Window size fit
        #TIME_ADJUST += 1
  if RESEND:
    WINDOW = 1
    for seq in UNACKED:
      log("RESENDING: " + str(seq))
      send_packet(UNACKED_MESSAGES[seq])

log("About to send EOF packet")
sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE}), dest)
result = None
while result == None:
  try:
    result = sock.recvfrom(MSG_SIZE)
  except:
    sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE}), dest)

sys.exit(0)
