#!/usr/bin/python -u
#
# Project 3 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0
WINDOW = 1
UNACKED = []
DATA = []
# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet():
  global SEQUENCE
  global UNACKED
  log("WINDOW SIZE: " + str(WINDOW))
  data = sys.stdin.read(DATA_SIZE)
  if (len(data) > 0):
    msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False})
    assert (len(msg) <= 1472), "ERROR: Datagram is longer than 1472 bytes!!!"
    SEQUENCE += len(data)
    DATA.append({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False})
    UNACKED.append(int(SEQUENCE))
    if sock.sendto(msg, dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
    return True
  else:
    return False

def resend_packet(info):
  msg = json.dumps(info)
  UNACKED.append(int(info['sequence']))
  if sock.sendto(msg, dest) < len(msg):
    log("[error] unable to fully send packet")
  else:
    log("[send data] " + str(info['sequence'] + " (" + str(len(info['data']))) + ")")
  return True
  




# Send first packet
#send_next_packet()

# Now read in data, send packets
while True:
  log("ABOUT TO SLEEP")
  result = sock.recvfrom(MSG_SIZE)

  while len(UNACKED) < WINDOW:
    send_next_packet()
     
  if result:
    (data, addr) = result
    try:
      decoded = json.loads(data)

      #log(str(decoded['ack']) + " -- " + str(UNACKED))     
      # If there is an ack, send next packet
      if decoded['ack'] in UNACKED:
        log("[recv ack] " + str(SEQUENCE))
        WINDOW += 5
        for d in DATA:
          if d['sequence'] == decoded['ack']:
            d['ack'] = True
            break
        UNACKED.remove(decoded['ack'])       
        # Try to send next packet; break if no more data
        if (not send_next_packet()):
          break
      else:
        log("ACKED IMPOSSIBLE THING")
        #ifor d in DATA:
        #  if not d['ack']:
        #    resend_packet(d) 
    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  else:
    log("[error] timeout")
    sys.exit(-1)

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
sys.exit(0)
