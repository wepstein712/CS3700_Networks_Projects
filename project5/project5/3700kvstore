#!/usr/bin/env python

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

leader_id = '0001' 

puts = {}
msg_num = 0
queue = []

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0

def put(text):
  #IF we don't have a leader, define one, constant for now
  #text = json.dumps(msg)
  if redirect(text):
    return
  else:
    #did not redirect, need to put
    puts[text['key']] = text['value'] 
    src = text['dst']
    dst = text['src']
    packet = {"src": src, "dst": dst, "leader": leader_id, "type": "ok", "MID": text['MID']}
    sendSimple(packet)


def get(text):
 #text = json.dumps(msg)
  if redirect(text):
    return
  else:
    src = text['dst']
    dst = text['src']
    value = ""
    if text['key'] in list(puts.keys()):
      value = puts[text['key']]
    packet = {"src": src, "dst": dst, "leader": leader_id, "type": "ok", "MID": text['MID'], "value": value}
    sendSimple(packet)

def redirect(msg):
  if leader_id == my_id:
    return False
  else:
    src = msg['dst']
    dst = msg['src']
    MID = msg['MID']
    packet = {"src": src, "dst": dst, "leader": leader_id, "type": "redirect", "MID": MID}
    print "REDIRECTING: ##################################################"
    sendSimple(packet)
  return True

def sendSimple(msg):
  global msg_num
  sock.send(json.dumps(msg))
  print "SENDING:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n" + json.dumps(msg, indent=4)
  msg_num = msg_num + 1
def sendAll(mag):
  return True

while True:
	ready = select.select([sock], [], [], 0.1)[0]
	
	if sock in ready:
		msg_raw = sock.recv(32768)
		
		if len(msg_raw) == 0: continue
		msg = json.loads(msg_raw)
		
		# For now, ignore get() and put() from clients
		if msg['type'] in ['get', 'put']:
                        if msg['type'] == 'get':
			  get(msg)
			if msg['type'] == 'put':
			  put(msg)
			if msg['type'] == 'bump':
			  pass
			#print json.dumps(msg, indent=4)
		
		# Handle noop messages. This may be removed from your final implementation
		elif msg['type'] == 'noop':
			print '%s received a NOOP from %s' % (msg['dst'], msg['src'])
			#print json.dumps(msg, indent=4)
	clock = time.time()
	if clock-last > .1:
		# Send a no-op message to a random peer every two seconds, just for fun
		# You definitely want to remove this from your implementation
		msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': leader_id, 'type': 'noop'}
		sock.send(json.dumps(msg))
		print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
  		print "PUTS SIZE: " + str(len(list(puts.keys()))) + "\n NUM MESSAGES: " + str(msg_num)
		last = clock
print "Length of puts: " + str(len(puts)) 
