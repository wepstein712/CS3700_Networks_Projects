#!/usr/bin/env python

import sys, socket, select, time, json, random
from datetime import datetime

# Your ID number
my_id = sys.argv[1]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)


leader_id = '0001' 

stateMachine = {}
msg_num = 0
queue = []
lock = False

# Our Info
votedFor = None
log = []

commitIndex = 0
lastApplied = 0

# Leader Info
nextIndex = []
matchIndex = []

# Election
term = 0 
lastLogIndex = 0
lastLogTerm = 0

voted = []

electionQueue = []


# Append Info
prevLogIndex = 0
prevLogTerm = 0

entries = []
quorum = []
cachedPackets = []
cachedPuts = []

batchSize = 3 

# Safety Checks
quorumCount = 0
redirectCount = 0
quorumMax = 5
redirectMax = 3

redirectPause = False

# Time stuff
clock = None
last = None
ackTimeout = None


# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

last = 0

#TODO: 
# - 

def put(text):
	global lock, cachedPuts, log, commitIndex, cachedPackets, entries
	#IF we don't have a leader, define one, constant for now
  	#text = json.dumps(msg)
	#print "Put Request: " + json.dumps(text, indent=4)
  	if redirect(text):
    		return
  	else:
		key = text['key']
		val = text['value']
		#print "Key - " + str(key) + " : Value - " + str(val)
    		#did not redirect, we know we are leader, need to lock system, send appends to followers, get quorum, and commit
    		cachedPuts.append(text)
		commitIndex = commitIndex + 1
		log.append({key: val, 'term': term})
		#Loop here for blocking in the future, make sure to not lock while building a block
		entries.append([key, val, term, text['MID']])
		if len(entries) >= batchSize:
			lock = True
			if len(log) > batchSize:
                	        prevLogIndex = len(log) - batchSize - 1
        	                prevLogTerm = log[prevLogIndex]['term']
	                else:
                        	prevLogIndex = -1
                        	prevLogTerm = -1		
			
			append(entries)
			entries = []
    		src = text['dst']
    		dst = text['src']
    		packet = {"src": src, "dst": dst, "leader": leader_id, "type": "ok", "MID": text['MID']}
		cachedPackets.append(packet)

def append(ents):
	#Args: term, leader_id, prevLogIndex, prevLogTerm, entries[], leaderCommit, src, dst, type
	packet = {'src': my_id, 'dst': None, 'leader': my_id, 'type': 'append', 'term': term, 'prevLogIndex': prevLogIndex, 'prevLogTerm': prevLogTerm, 'entries': ents, 'leaderCommit': commitIndex}
	sendAll(packet)

def confirm(msg):
	global log, term, prevLogIndex, stateMachine, prevLogTerm, last
	succ = True
	src = msg['dst']
        dst = msg['src']
	pIndex = msg['prevLogIndex']
	if msg['term'] < term:
		succ = False
		#print "Leader's term is less than follower's term\n"
	if pIndex != 0 and (len(log) <= pIndex or log[pIndex][2] != msg['prevLogTerm']):
		succ = False
		#print "Log index mismatch or term mismatch in log\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
		#print "Log length:" + str(len(log)) + " vs " + str(pIndex)
		#if len(log) > pIndex:
			#print "Previous term: " + str(log[pIndex][2]) + " vs " + msg['prevLogTerm']
	if succ:
		log = log[:pIndex + 1]
		prevLogIndex = pIndex
		prevLogTerm = term
		for entry in msg['entries']:
			log.append({entry[0]:entry[1], 'term':entry[2]})
			stateMachine[entry[0]] = entry[1]
		#TODO: Update the stateMachine here based on log
	packet = {'src':src, 'dst':dst, 'leader': leader_id, 'type': 'confirm', 'success': succ, 'term': term, 'leaderCommit': msg['leaderCommit']}
	sendSimple(packet)
	last = time.time()

def tallyQuorum(msg):
	global commitIndex, term, quorum, cachedPackets, cachedPuts, lock, last, clock, ackTimeout, quorumCount
	if msg['success']:
		#Check what commit this is for
		if msg['term'] == term and msg['leaderCommit'] == commitIndex:
			print "Got a confirm for : " + str(commitIndex)
			quorumCount = quorumCount + 1
			ackTimeout = time.time()
			if not msg['src'] in quorum:
				quorum.append(msg['src'])
			if len(quorum) >= len(replica_ids) / 2:
				#print "Commiting packet :" + str(quorum) + " all agreed\n"
				#print json.dumps(cachedPacket, indent=4)
				for pack in cachedPackets:
					sendSimple(pack)
				for put in cachedPuts:
					stateMachine[put['key']] = put['value']
				ackTimeout = None
				last = time.time()
				clock = last
				cachedPackets = []
				cachedPuts = []
				commitIndex = commitIndex + 1
				quorumCount = 0
				lock = False
				quorum = []
				sendHeartbeat()
		else:
			print "Did not match : "
			print "Term : " + str(term) + " vs " + str(msg['term'])
			print "Commit: " +str(commitIndex) + " vs " + str(msg['leaderCommit'])
	else:
		#Elect new leader here, leader should shutdown/demote itself
		#print "Need to elect new leader, FAILURE in put\n"
		return

def selfImpeach():
	global leader_id, quorumCount, clock, last, quorum, lock, cachedPuts, cachedPackets, entries
	newLeader = False
	while not newLeader:
		rndIndex = random.randint(0,len(replica_ids) - 1)
		rndLead = replica_ids[rndIndex]
		if not rndLead in quorum:
			leader_id = rndLead
			newLeader = True
	#print "IMPEAAAAAAAAAAAAACHHHHHHHHHHHH -----------------------------------------------------------------------------------------------"
	msg = {'src':my_id, 'dst': None, 'type':'impeach', 'term':term, 'leader':leader_id}
	#print json.dumps(msg, indent=4)
	for id in quorum:
		msg['dst'] = id
		for x in range(3):
			sendSimple(msg)
	for put in cachedPuts:
		redirect(put)
	for item in queue:
		redirect(item)	
	ackTimeout = None
        last = time.time()
        clock = last
        cachedPackets = []
        cachedPuts = []
	entries = []
        quorumCount = 0
        lock = False
        quorum = []

def get(text):
 	#text = json.dumps(msg)
 	if redirect(text):
    		return
  	else:
		#print "GETTING FOR: " + json.dumps(text, indent=4)
    		src = text['dst']
    		dst = text['src']
		key = text['key']
    		value = ""
    		if key in list(stateMachine.keys()):
      			value = stateMachine[key]
      			packet = {"src": src, "dst": dst, "leader": leader_id, "type": "ok", "MID": text['MID'], "value": value}
			#print "SENDING GET KEY :" + str(key)
			#print "SENDING GET VAL :" + str(value)
    		else:
			#print "SENDING GET KEY :" + str(key)
                        #print "SENDING GET VAL :" + str(value)
      			#print "FAIL - GET - @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
      			packet =  {"src": src, "dst": dst, "leader": leader_id, "type": "fail", "MID": text['MID']}
	#print json.dumps(packet, indent=4)
	#print "Get for: " + str(text['MID'])
	sendSimple(packet)

def redirect(msg):
	global redirectCount, redirectPause
  	if leader_id == my_id:
    		return False
  	else:
		redirectCount = redirectCount + 1
		if redirectCount > redirectMax:
			print "Redirect pause"
		 	redirectPause = True	
			redirectCount = 0	
    		src = msg['dst']
    		dst = msg['src']
    		MID = msg['MID']
    		packet = {"src": src, "dst": dst, "leader": leader_id, "type": "redirect", "MID": msg['MID']}
    		print "REDIRECTING: ##################################################" + str(MID)
    		sendSimple(packet)
  		return True

def sendSimple(msg):
  	global msg_num
  	sock.send(json.dumps(msg))
	print "SENDING:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ TIME: " + str(clock)  + "\n" + json.dumps(msg, indent=4)
  	msg_num = msg_num + 1
  
def sendAll(msg):
	for rid in replica_ids:
		msg['dst'] = rid
		msg['src'] = my_id
		print "SENDING:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ TIME: " + str(clock)  + "\n" + json.dumps(msg, indent=4)
		sock.send(json.dumps(msg))	 

def sendHeartbeat():
	global term
	msg = {'src': my_id, 'dst': None, 'leader': leader_id, 'type': 'beat', 'term': term}
	sendAll(msg)

def elect():
	global term, votedFor, voted, leader_id
	term = term + 1
	msg = {"src": my_id, "dst": None, "leader": my_id, "type": "election", "term": term, "lastLogIndex": lastLogIndex, "lastLogTerm": lastLogTerm}	
	#print "New Election Announcement: "# + json.dumps(msg, indent=4)
	sendAll(msg)
	voted.append(my_id)
	votedFor = my_id
	leader_id = my_id

def vote(msg):
	global votedFor, term, leader_id
	v = True
	if msg['term'] <= term:
		v = False
		#print ("TOO LATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n")
	else:
		if msg['term'] > term or votedFor == None or votedFor == msg['src']:
			#Yes, for now (Fix later)
			if msg['lastLogIndex'] >= lastLogIndex:
				votedFor = msg['src']
				leader_id = votedFor
	src = msg['dst']
        dst = msg['src']
        packet = {"src": src, "dst": dst, "leader": leader_id, "type": "vote", "response": v, "term": msg['term']}
	#print "Vote response: "# + json.dumps(packet, indent=4)
	sendSimple(packet)

def tally(msg):
	global term, votedFor, leader_id, electionQueue
	#Check for right term here
	if votedFor != None and term == msg['term'] and not msg['src'] in voted:
		voted.append(msg['src'])
		if len(voted) > len(replica_ids) / 2:
			votedFor = None
			leader_id = my_id
			#print "Leader ID :" + str(leader_id)
			#TODO 
			msg = {'src': my_id, 'dst': None, 'leader': leader_id, 'term': term, 'type': 'hello'}
			#print "New Leader Announcement: "# + json.dumps(msg, indent=4)
			sendAll(msg)
			for entry in electionQueue:
				if entry['type'] == 'put':
					put(entry)
				else:
					get(entry)
			electionQueue = []

def yes_sir(msg):
	global leader_id, votedFor, term, electionQueue, cachedPuts, redirectPause
	leader_id = msg['leader']
	votedFor = None
	voted = []
	term = msg['term']
	#Data validation here
	for entry in electionQueue:
		redirect(entry)
	electionQueue = []
	for put in cachedPuts:
		redirect(put)
	cachedPuts = []
	last = time.time()
	redirectPause = False

def handleMessage(msg):
	global queue, last, term, leader_id, redirectPause
	print "RECEIVED : " + json.dumps(msg, indent=8)
	if msg['type'] == 'put' and not redirectPause:
			if not lock:
				if len(queue) > 0:
					queue.append(msg)
					msg = queue[0]
					if len(queue) <= 1:
						queue = []
						#print "Popped " + str(msg['MID']) + " from queue, queue is now: " + str(len(queue))
					else:
						queue = queue[1:]
						#print "Popped " + str(msg['MID']) + " from queue, queue is now: " + str(len(queue))
				if msg['type'] == 'put':
			  		put(msg)
			else:
				queue.append(msg)
				#print "Added to queue, is now: " + str(len(queue))
	else:
		#TODO: Make this a switch case
		if msg['type'] == 'confirm':
			tallyQuorum(msg)	
		elif msg['type'] == 'get' and not redirectPause:
			get(msg)
		elif msg['type'] == 'append':
			redirectPause = False
			confirm(msg)
		elif msg['type'] == 'election':
			vote(msg)
		elif msg['type'] == 'vote':
			tally(msg)
		elif msg['type'] == 'hello':
			last = time.time()
			yes_sir(msg)
		elif msg['type'] == 'poke':
			msg = {'src': my_id, 'dst': msg['src'], 'leader': leader_id, 'type': 'beat', 'term': term}
			sendSimple(msg)
		elif msg['type'] == 'beat':
			#print '%s received a Heartbeat from %s' % (msg['dst'], msg['src'])
			last = time.time()
		elif msg['type'] == 'impeach':
			print "RECEIVED IMPEACH"
			if leader_id == msg['src'] and term == msg['term']:
				leader_id = msg['leader']
	#print "Queue so far: " + str(queue)

def electionHandleMessage(msg):
	global queue, last, prevLogTerm, term
	if msg['type'] in ['get','put']:
		electionQueue.append(msg)
	elif msg['type'] == 'confirm':
        	return
        elif msg['type'] == 'append':
		if msg['term'] >= term:
			yes_sir(msg)
                confirm(msg)
        elif msg['type'] == 'election':
                vote(msg)
        elif msg['type'] == 'vote':
                tally(msg)
        elif msg['type'] == 'hello':
		if msg['term'] >= term:
                	last = time.time()
                	yes_sir(msg)
	elif msg['type'] == 'poke':
		if msg['term'] <= term:
                        msg = {'src': my_id, 'dst': msg['src'], 'leader': leader_id, 'type': 'beat', 'term': term}
                        sendSimple(msg)
        elif msg['type'] == 'beat':
		if msg['term'] >= term:
			yes_sir(msg)
                	#print '%s received a Heartbeat from %s' % (msg['dst'], msg['src'])
               		last = time.time()
	elif msg['type'] == 'impeach':
		#print "RECEIVED IMPEACH"
                if leader_id == msg['src'] and term == msg['term']:
			term = -1
                        yes_sir(msg)

waitTime = random.uniform(.300,.450)
halfWaitTime = (waitTime / 2) - .05
#print "Wait time for " + str(my_id) + " is :" + str(waitTime)
time.sleep(1.4)
clock = time.time()
last = clock + 1
#print "Clock: " + str(clock)
poke = False

while True:
	ready = select.select([sock], [], [], 0.1)[0]
	#if leader_id == my_id:
		#print "Leader is starting new loop. ================================================"
		#print "Queue lenght: " + str(len(queue))
		#print "CachedPackets Length: " + str(len(queue))
	
	if ackTimeout:
		if clock-ackTimeout >= .02 and leader_id == my_id and votedFor == None:
			append(entries)
	if quorumCount >= quorumMax:
		selfImpeach()	

	if sock in ready:
		msg_raw = sock.recv(32768)
		msg = None

		if len(msg_raw) == 0:
			print "EMTPY" 
			if len(queue) <= 0:
				if len(entries) == 0:
					continue
				else:
					append(entries)
					#print "FINAL APPEND"
		else:
			msg = json.loads(msg_raw)
		# Handle special cases of get() and put()
		if votedFor == None:
			handleMessage(msg)
		else:
			electionHandleMessage(msg)
		#print json.dumps(msg, indent=4)
	else:
		if len(queue) > 0 and leader_id == my_id and votedFor == None:
			#print "Non-socket message ***************************************************************************"
			msg = queue[0]
			if len(queue) <= 1:
				queue = []
			else:
				queue = queue[1:]
			handleMessage(msg)

	clock = time.time()
	diff = clock-last
	if diff >= .095 and leader_id == my_id:
		#if entries:
		#	append(entries)
		#else:
		sendHeartbeat()
		last=clock
	
	if diff > halfWaitTime and diff < waitTime and leader_id != my_id and not poke:
		msg = {'src': my_id, 'dst': leader_id, 'leader': leader_id, 'type': 'poke', 'term': term}
		sendSimple(msg)
		sendSimple(msg)
		poke = True


	if diff > waitTime and leader_id != my_id and votedFor == None:
		print "Voted for: " + str(votedFor)
		print "Time diff: " + str(clock-last)
		clock = time.time()
		last = clock
		elect()
	#print "stateMachine SIZE: " + str(len(list(stateMachine.keys()))) + "\n NUM MESSAGES: " + str(msg_num)
#print "Length of stateMachine: " + str(len(stateMachine)) 
